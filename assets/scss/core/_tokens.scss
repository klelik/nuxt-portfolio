@use "sass:math";
@use "sass:list";
@use "sass:map";

@function createCssVars($tokens, $prefix) {
  $tokenMap: ();
  @each $token, $val in $tokens {
    $tokenMap: map-merge($tokenMap, ("--#{$prefix}-#{$token}": #{$val}));
  }
  @return $tokenMap;
}

/**
 * @summary getFluidSize takes a min and max value and transforms it to a curved clamp value
 * 
 * For more reading on the maths:
 * https://utopia.fyi/blog/clamp/
 * https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
 */
@function getFluidSize($min, $max, $minWidth: 20rem, $maxWidth: 80rem) {
  $slope: math.div(($max - $min), ($maxWidth - $minWidth));
  $yIntersection: (-1 * $minWidth) * $slope + $min;
  $fluidSize: clamp(#{$min}, #{$yIntersection} + (#{$slope} * 100vw), #{$max});
  @return $fluidSize;
}

@mixin tokensToVars($vars, $el: ":root") {
  #{$el} {
    @each $var, $val in $vars {
      #{$var}: #{$val};
    }
  }
}

@mixin tokensToUtils($tokens, $vars, $prefix, $prop, $nested: "") {
  $keys: map.keys($vars);
  $tokenList: map.keys($tokens);
  @each $token, $_ in $tokens {
    $i: index($tokenList, $token);
    .#{$prefix}-#{$token} #{$nested} { #{$prop}: var(#{list.nth($keys, $i)}); }
  }
}